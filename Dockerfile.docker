FROM ubuntu:20.04

ARG DOCKER_CHANNEL=stable
# When latest, latest (stable) version is picked dynamically
ARG DOCKER_VERSION=latest

# Build arguments for OCI-oriented information
ARG OCI_GITHUB=https://github.com/msyea/github-actions-runner-rootless
ARG OCI_ORG=msyea
ARG OCI_SHA=
ARG OCI_BRANCH=main
ARG OCI_DOCKERFILE=Dockerfile.docker
ARG OCI_RFC3339=

# Dynamic OCI Labels
LABEL org.opencontainers.image.authors="Simon Mayes <https://github.com/msyea>, Emmanuel Fr√©con <https://github.com/efrecon>"
LABEL org.opencontainers.image.url="${OCI_GITHUB}"
LABEL org.opencontainers.image.documentation="${OCI_GITHUB}"
LABEL org.opencontainers.image.source="${OCI_GITHUB}/blob/${OCI_BRANCH}/${OCI_DOCKERFILE}"
LABEL org.opencontainers.image.vendor="${OCI_ORG}"
LABEL org.opencontainers.image.version="${DOCKER_VERSION}"
LABEL org.opencontainers.image.revision="${OCI_SHA}"
LABEL org.opencontainers.image.license="MIT"
LABEL org.opencontainers.image.title="Docker Client (and Server)"
LABEL org.opencontainers.image.description="Dockerised Docker Client"
LABEL org.opencontainers.image.created="${OCI_RFC3339}"

RUN apt update \
    && apt install -y ca-certificates openssh-client wget

# set up nsswitch.conf for Go's "netgo" implementation (which Docker explicitly uses)
# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
RUN echo 'hosts: files dns' >> /etc/nsswitch.conf

# Copy our version guess helper
COPY utils/version.sh utils/install-docker.sh /usr/local/bin/

# TODO ENV DOCKER_SHA256
# https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!
# (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)

RUN install-docker.sh -v "${DOCKER_VERSION}" -c "${DOCKER_CHANNEL}"

COPY modprobe.sh /usr/local/bin/modprobe
COPY docker-entrypoint.sh /usr/local/bin/

# https://github.com/docker-library/docker/pull/166
#   dockerd-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-generating TLS certificates
#   docker-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-setting DOCKER_TLS_VERIFY and DOCKER_CERT_PATH
# (For this to work, at least the "client" subdirectory of this path needs to be shared between the client and server containers via a volume, "docker cp", or other means of data sharing.)
ENV DOCKER_TLS_CERTDIR=/certs
# also, ensure the directory pre-exists and has wide enough permissions for "dockerd-entrypoint.sh" to create subdirectories, even when run in "rootless" mode
RUN mkdir /certs /certs/client && chmod 1777 /certs /certs/client
# (doing both /certs and /certs/client so that if Docker does a "copy-up" into a volume defined on /certs/client, it will "do the right thing" by default in a way that still works for rootless users)

ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["sh"]