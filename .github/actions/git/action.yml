name: Git Build&Publish
description: |
  Publish git image to a registry. You need to be logged in at the registry for
  this action to perform with success.

inputs:
  registry:
    required: true
    description: |
      The root of the registry, including "username" to publish to, e.g.
      msyea (to default to the docker hub), docker.io/msyea to make
      DockerHub explicit, or ghcr.io/msyea.
  version:
    required: false
    description: |
      The version of git to use when building the images. Empty for latest (and
      tag will be short SHA)
  latest:
    required: false
    default: "false"
    description: |
      When set to `true` this will arrange to make the images generated the
      latest one.

outputs:
  version:
    description:
      Version of git that was passed to the build stage, i.e. either the git
      short sha, or the incoming (request) semver.
    value: ${{ steps.output.outputs.version }}

runs:
  using: composite
  steps:
    # Guess the versions to use out of the values of the inputs and store these
    # in the environment.
    # + GIT_VERSION will be the incoming semver, or the git short SHA
    #   (understood as latest, e.g. current official release at build time)
    - name: Git Version
      id: version
      shell: bash
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          printf GIT_VERSION=%s\\n "${{ inputs.version }}" >> "$GITHUB_ENV"
        else
          printf GIT_VERSION=%s\\n "$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
        fi
    - name: Output version
      id: output
      shell: bash
      run: echo "::set-output name=version::${{ env.GIT_VERSION }}"

    # Setup multi-platform support for Docker build
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Build and Push the image to the remote registry, in turns.
    - name: Build/Push git to Registry
      id: git
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile.git
        tags: ${{ inputs.registry }}/ubuntu-git:${{ env.GIT_VERSION }}
        platforms: linux/amd64,linux/arm64
        build-args: |
          GIT_VERSION=${{ env.GIT_VERSION }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Make the images latest if necessary.
    - name: Make Docker Images latest
      if: inputs.latest == 'true'
      shell: bash
      run: |
        docker image pull "${{ inputs.registry }}/ubuntu-git:${{ env.GIT_VERSION }}"
        docker image tag "${{ inputs.registry }}/ubuntu-git:${{ env.GIT_VERSION }}" "${{ inputs.registry }}/ubuntu-git:latest"
        docker image push "${{ inputs.registry }}/ubuntu-git:latest"
