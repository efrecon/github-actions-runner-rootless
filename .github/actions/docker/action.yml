name: Docker Build&Publish
description: |
  Publish Docker-related images to a registry. You need to be logged in at the
  registry for this action to perform with success.

inputs:
  registry:
    required: true
    description: |
      The root of the registry, including "username" to publish to, e.g.
      msyea (to default to the docker hub), docker.io/msyea to make
      DockerHub explicit, or ghcr.io/msyea.
  version:
    required: false
    description: |
      The version of the Docker engine and rootless tools to use when building
      the images. Empty for latest (and tag will be short SHA). When the version
      is a "real" version, two images will be created: one with that version,
      and another one with the version, followed by a dash, followed by the git
      SHA. This is to be able to pinpoint images that would have been generated
      for a given version of docker and a given version of the project.
  latest:
    required: false
    default: "false"
    description: |
      When set to `true` this will arrange to make the images generated the
      `latest` one.
  platforms:
    required: false
    default: linux/amd64,linux/arm64
    description: |
      The comma-separated list of platforms to build for. This list should be
      compatible with the docker/build-push-action@v2 action, and all
      architectures supported within the Dockerfiles, if relevant.

outputs:
  version:
    description:
      Version of the Docker engine that was passed to the build stage, i.e.
      either the git short sha, or the incoming (request) semver.
    value: ${{ steps.output.outputs.version }}

runs:
  using: composite
  steps:
    # Compute git short SHA, as ${{ github.sha }} is the long one.
    - name: Git short SHA
      id: sha
      shell: bash
      run: printf '::set-output name=sha::%s\n' "$(git rev-parse --short HEAD)"
    # Guess the versions to use out of the values of the inputs and store these
    # in the environment.
    # + DOCKER_VERSION will be the incoming semver, or the git short SHA
    #   (understood as latest, e.g. current official release at build time)
    # + DOCKER_VERSION_GITREF will be the incoming semver, followed by a dash,
    #   then the git short SHA, or the same as DOCKER_VERSION.
    - name: Docker Version
      id: version
      shell: bash
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          printf DOCKER_VERSION=%s\\n "${{ inputs.version }}" >> "$GITHUB_ENV"
          printf DOCKER_VERSION_GITREF=%s-%s\\n "${{ inputs.version }}" "${{ steps.sha.outputs.sha }}" >> "$GITHUB_ENV"
        else
          printf DOCKER_VERSION=%s\\n "${{ steps.sha.outputs.sha }}" >> "$GITHUB_ENV"
          printf DOCKER_VERSION_GITREF=%s\\n "${{ steps.sha.outputs.sha }}" >> "$GITHUB_ENV"
        fi
    # Set the output version.
    - name: Output version
      id: output
      shell: bash
      run: echo "::set-output name=version::${{ env.DOCKER_VERSION }}"

    # Setup multi-platform support for Docker build
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Build and Push the image to the remote registry, in turns, i.e. first
    # ubuntu-docker, then ubuntu-dind.
    - name: Build/Push Docker to Registry
      id: docker
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile.docker
        tags: |
          ${{ inputs.registry }}/ubuntu-docker:${{ env.DOCKER_VERSION }}
          ${{ inputs.registry }}/ubuntu-docker:${{ env.DOCKER_VERSION_GITREF }}
        platforms: ${{ inputs.platforms }}
        build-args: |
          DOCKER_VERSION=${{ env.DOCKER_VERSION }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Build/Push DinD to Registry
      id: dind
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile.dind
        tags: |
          ${{ inputs.registry }}/ubuntu-dind:${{ env.DOCKER_VERSION }}
          ${{ inputs.registry }}/ubuntu-dind:${{ env.DOCKER_VERSION_GITREF }}
        platforms: ${{ inputs.platforms }}
        push: true
        build-args: |
          REGISTRY=${{ inputs.registry }}
          DOCKER_VERSION=${{ env.DOCKER_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Make the images latest if necessary.
    - name: Make image ubuntu-docker latest
      if: fromJSON(inputs.latest)
      uses: akhilerm/tag-push-action@v2.0.0
      with:
        src: ${{ inputs.registry }}/ubuntu-docker:${{ env.DOCKER_VERSION_GITREF }}
        dst: ${{ inputs.registry }}/ubuntu-docker:latest
    - name: Make image ubuntu-dind latest
      if: fromJSON(inputs.latest)
      uses: akhilerm/tag-push-action@v2.0.0
      with:
        src: ${{ inputs.registry }}/ubuntu-dind:${{ env.DOCKER_VERSION_GITREF }}
        dst: ${{ inputs.registry }}/ubuntu-dind:latest
