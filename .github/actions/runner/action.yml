name: Runner Build&Publish
description: |
  Publish Docker images for the GH Actions Runner to a registry. You need to be
  logged in at the registry for this action to perform with success.

inputs:
  registry:
    required: true
    description: |
      The root of the registry, including "username" to publish to, e.g.
      msyea (to default to the docker hub), docker.io/msyea to make
      DockerHub explicit, or ghcr.io/msyea.
  docker:
    required: false
    default: 20.10.12
    description: |
      The version of the Docker engine and rootless tools to use when
      building the image. Cannot be empty.
  git:
    required: false
    default: 2.35.1
    description: |
      The version of git to use when building the image. Cannot be empty.
  runner:
    required: false
    description: |
      The version of the GitHub runner to use when building the images.
      Empty for latest (and tag will be short SHA)
  latest:
    required: false
    default: "false"
    description: |
      When set to `true` this will arrange to make the GH actions runner image
      generated the latest one.

runs:
  using: composite
  steps:
    # Compute git short SHA, as ${{ steps.sha.outputs.sha }} is the long one.
    - name: Git short SHA
      id: sha
      shell: bash
      run: printf '::set-output name=sha::%s\n' "$(git rev-parse --short HEAD)"

    # Guess the versions to use out of the values of the inputs and store these
    # in the environment.
    # + RUNNER_VERSION will be the incoming semver, or "latest" (e.g. current
    #   official release at build time).
    # + TAG is the name of the GH Action image to generate, either the incoming
    #   semver, or the git short SHA.
    - name: Runner Version
      id: version
      shell: bash
      run: |
        if [ -n "${{ inputs.runner }}" ]; then
          printf RUNNER_VERSION=%s\\n "${{ inputs.runner }}" >> "$GITHUB_ENV"
          printf RUNNER_VERSION_GITREF=%s-%s\\n "${{ inputs.runner }}" "${{ steps.sha.outputs.sha }}" >> "$GITHUB_ENV"
        else
          printf RUNNER_VERSION=%s\\n "${{ steps.sha.outputs.sha }}" >> "$GITHUB_ENV"
          printf RUNNER_VERSION_GITREF=%s\\n "${{ steps.sha.outputs.sha }}" >> "$GITHUB_ENV"
        fi

    # Setup multi-platform support for Docker build
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Build and Push the image to the remote registry
    - name: Build/Push GH Actions Runner to Registry
      if: inputs.runner != 0
      uses: docker/build-push-action@v2
      with:
        tags: |
          ${{ inputs.registry }}/github-actions-runner:${{ env.RUNNER_VERSION }}
          ${{ inputs.registry }}/github-actions-runner:${{ env.RUNNER_VERSION_GITREF }}
        platforms: linux/amd64,linux/arm64
        push: true
        build-args: |
          REGISTRY=${{ inputs.registry }}
          DOCKER_VERSION=${{ inputs.docker }}-${{ steps.sha.outputs.sha }}
          GIT_VERSION=${{ inputs.git }}-${{ steps.sha.outputs.sha }}
          GH_RUNNER_VERSION=${{ env.RUNNER_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Build/Push GH Actions Runner to Registry
      if: inputs.runner == 0
      uses: docker/build-push-action@v2
      with:
        tags: |
          ${{ inputs.registry }}/github-actions-runner:${{ env.RUNNER_VERSION_GITREF }}
        platforms: linux/amd64,linux/arm64
        push: true
        build-args: |
          REGISTRY=${{ inputs.registry }}
          DOCKER_VERSION=${{ inputs.docker }}
          GIT_VERSION=${{ inputs.git }}
          GH_RUNNER_VERSION=${{ env.RUNNER_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Make the GH actions runner latest if necessary.
    - name: Make GH Actions Image latest
      if: fromJSON(inputs.latest)
      uses: akhilerm/tag-push-action@v2.0.0
      with:
        src: ${{ inputs.registry }}/github-actions-runner:${{ env.RUNNER_VERSION_GITREF }}
        dst: ${{ inputs.registry }}/github-actions-runner:latest
